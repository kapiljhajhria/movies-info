{"version":3,"sources":["logo.svg","MoviePoster/index.js","MovieGrid/index.js","MovieData/index.js","MovieDetails/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MoviePoster","movie","this","props","to","id","className","src","poster_path","alt","original_title","overview","substr","vote_average","React","Component","MoviesGrid","allMoviesData","map","MoviesData","state","isLoading","data","url","getApiKey","fetch","response","json","jsonMap","setState","getMovieData","MovieGrid","MovieDetails","match","params","console","log","movieDetails","backdrop_path","title","tagline","genres","el","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.62e03bd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './styles.css'\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\n\nclass MoviePoster extends React.Component {\n    render() {\n        const movie =this.props.movie;\n        return (\n            <Link to={`/moviedetails/${movie.id}`}>\n                <div className=\"movieCard\">\n                    <div className=\"movie-poster\" >\n                        <div>\n                            <img className=\"movieimg\" src={`https://image.tmdb.org/t/p/original${movie.poster_path}`} alt=\"\"/>\n                        </div>\n                    </div>\n                    <div className=\"mv-inf\">\n                        <div className=\"mv-inf-top\">\n                            <div className=\"mv-inf-title\">\n                                {movie.original_title}\n                            </div>\n                        </div>\n                        <div>\n                            <hr/>\n                        </div>\n                        <div className=\"mv-inf-btm\">\n                            <div className=\"mv-inf-overview\">\n                                {movie.overview.substr(0,70)}\n                            </div>\n                            <div className=\"mv-inf-vote-avg\">\n                                {movie.vote_average}\n                            </div>\n\n\n                        </div>\n\n                    </div>\n                </div>\n            </Link>\n\n\n        );\n    }\n}\n\nexport default MoviePoster;","import React from 'react';\nimport MoviePoster from \"../MoviePoster\";\nimport './styles.css'\nimport '../moviedatabase'\nimport moviesInfoList from \"../moviedatabase\";\n\nclass MoviesGrid extends React.Component {\n\n    render() {\n        return (\n            <div className=\"moviesgrid\">\n            {/*    call function moviesRow here*/}\n                {this.props.allMoviesData.map((movie)=> <MoviePoster movie={movie}/>)}\n\n            </div>\n        );\n    }\n}\n\n\nexport default MoviesGrid;","import React from 'react';\nimport MovieGrid from \"../MovieGrid\";\nimport './styles.css'\n\n\nexport default class MoviesData extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading:false,\n            data:null\n        }\n    }\n    getApiKey(){\n        return \"9455f2fb0b779e4e7588ad14649658d3\";\n    }\n    async getMovieData(){\n        let tempList=[];\n\n            let url=\"https://api.themoviedb.org/3/discover/movie?api_key=\"+this.getApiKey();\n            let response = await fetch(url);\n            let jsonMap= await response.json();\n            let data=jsonMap['results'];\n\n        this.setState({data:data,isLoading:true});\n        // return data;\n    }\n    componentDidMount(){\n        this.getMovieData();\n    }\n\n    render() {\n        return (\n            <div className={\"main\"}>\n                {!this.state.isLoading?(\n                    <div className={\"loadingScreen\"}>\n                        <div className=\"lds-spinner\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                    </div>\n                ):(\n\n                    <MovieGrid allMoviesData={this.state.data}>\n\n                    </MovieGrid>\n                )}\n            </div>\n        );\n    }\n}\n\n\n","import React from 'react';\nimport './styles.css'\nimport MovieGrid from \"../MovieGrid\";\n\nexport default class MovieDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            isLoading: false,\n            data: null\n        }\n    }\n\n    // https://api.themoviedb.org/3/movie/102899?api_key=9455f2fb0b779e4e7588ad14649658d3\n    getApiKey() {\n        return \"9455f2fb0b779e4e7588ad14649658d3\";\n    }\n\n    async getMovieData() {\n        let url = \"https://api.themoviedb.org/3/movie/\" + this.state.id + \"?api_key=\" + this.getApiKey();\n        console.log('urls is:' + url);\n        let response = await fetch(url);\n        let data = await response.json();\n\n\n        this.setState({data: data, isLoading: true});\n        // return data;\n    }\n\n    componentDidMount() {\n        this.getMovieData();\n    }\n\n    render() {\n        const movieDetails = this.state.data;\n        return (\n            !this.state.isLoading ? (\n                <div className={\"loadingScreen-moviedetails\"}>\n                    <div className=\"lds-spinner\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            ) : (<div className=\"screen\">\n                <div className=\"background-img\">\n                    <img className=\"bg-img\" src={\"https://image.tmdb.org/t/p/original\" + movieDetails.backdrop_path}\n                         alt=\"\"/>\n                </div>\n                <div className=\"content\">\n                    <div className=\"poster-img\">\n                        <img src={\"https://image.tmdb.org/t/p/original\" + movieDetails.poster_path} alt=\"\"/>\n                    </div>\n\n                    <div className=\"mov-inf\">\n                        <div className=\"mov-name\">\n                            {movieDetails.title}\n\n                        </div>\n                        <div className=\"mov-tag\">\n                            {movieDetails.tagline}\n                        </div>\n                        <div className=\"mov-overview\">\n                            {movieDetails.overview}\n                        </div>\n                        <div className=\"mov-genres\">\n                            {movieDetails.genres.map((el)=><div className=\"genres\">\n                                {el['name']}\n                            </div>)}\n                        </div>\n                    </div>\n\n                </div>\n            </div>)\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MovieData from \"./MovieData\"\nimport './moviedatabase'\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport MovieDetails from './MovieDetails'\nfunction App() {\n  return (\n <Router>\n     <Switch>\n         <Route path=\"/moviedetails/:id\" component={MovieDetails}>\n\n         </Route>\n         <Route path=\"/\" component>\n           <MovieData>\n\n           </MovieData>\n       </Route>\n     </Switch>\n     <div className=\"App\">\n\n     </div>\n </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}